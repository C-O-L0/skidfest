===================================================================
--- Current Version
+++ New Version
@@ -1,12 +1,12 @@
 // ==UserScript==
 // @name SkidFest
 // @description A Player aid in the game Krunker.io!
-// @version 1.85
+// @version 1.89
 // @author SkidLamer
 // @homepage https://skidlamer.github.io/
 // @match *.krunker.io/*
-// @exclude *.krunker.io/social*
+// @exclude *krunker.io/social*
 // @updateURL https://skidlamer.github.io/js/Skidfest.user.js
 // @run-at document-start
 // @grant none
 // @noframes
@@ -268,8 +268,13 @@
                 name: "Player Tracers",
                 val: false,
                 html: () => this.generateSetting("checkbox", "renderTracers"),
             },
+            rainbowColor: {
+                name: "Rainbow ESP",
+                val: false,
+                html: () => this.generateSetting("checkbox", "rainbowColor"),
+            },
             renderChams: {
                 name: "Player Chams",
                 val: "off",
                 html: () =>
@@ -350,8 +355,13 @@
                 name: "Disable Players Weapon Sounds",
                 val: false,
                 html: () => this.generateSetting("checkbox", "disableWpnSnd", this),
             },
+            autoActivateNuke: {
+                name: "Auto Activate Nuke",
+                val: false,
+                html: () => this.generateSetting("checkbox", "autoActivateNuke", this),
+            },
             autoFindNew: {
                 name: "New Lobby Finder",
                 val: false,
                 html: () => this.generateSetting("checkbox", "autoFindNew", this),
@@ -653,9 +663,9 @@
         this.waitFor(_=>this.exports).then(exports => {
             if (!exports) return alert("Exports not Found");
             const found = new Set();
             const array = new Map([
-                ["utility", ["boxCornerIntersection", "getAngleDist2", "extractProperties", "formatConstName"]],
+                ["utility", ["orderByKills", "orderByScore"]],
                 ["config", ["serverTickRate", "camChaseTrn", "cameraHeight", "hitBoxPad"]],
                 ["overlay", ["render", "canvas"]],
                 ["three", ["ACESFilmicToneMapping", "TextureLoader", "ObjectLoader"]],
                 //["colors", ["challLvl", "getChallCol"]],
@@ -668,8 +678,9 @@
                     this.objectEntries(exports, ([rootObject, rootKey, rootValue, rootGet, rootSet, rootConfigurable, rootEnumerable, rootWritable]) => {
                         this.objectEntries(rootValue.exports, ([object, key, value, get, set, configurable, enumerable, writable]) => {
                             if (!found.has(name) && arr.includes(key)) {
                                 found.add(name);
+                                console.log("Found Export ", name);
                                 this[name] = rootValue.exports;
                             }
                         })
                     })
@@ -677,8 +688,10 @@
             })
         })
 
         this.waitFor(_=>this.ws.connected === true, 40000).then(_=> {
+            this.ws.__event = this.ws._dispatchEvent.bind(this.ws);
+            this.ws.__send = this.ws.send.bind(this.ws);
             this.ws.send = new original_Proxy(this.ws.send, {
                 apply(target, that, args) {
                     try {
                         var original_fn = Function.prototype.apply.apply(target, [that, args]);
@@ -686,9 +699,9 @@
                         e.stack = e.stack = e.stack.replace(/\n.*Object\.apply.*/, '');
                         throw e;
                     }
 
-                    if (args[0] === "ahl") {
+                    if (args[0] === "ah1") {
                         args[0] = "p";
                         args[1] = null;
                     }
 
@@ -703,14 +716,14 @@
                             waist: args[1][17],
                         }
                     }
                     return original_fn;
-                   // return target.apply(thisArg, msg);
+                   // return target.apply(that, msg);
                 }
             })
 
             this.ws._dispatchEvent = new original_Proxy(this.ws._dispatchEvent, {
-                apply(target, thisArg, [type, msg]) {
+                apply(target, that, [type, msg]) {
                     //console.log(type, msg)
                     if (type =="init") {
                         if(msg[9].bill && window.utilities.settings.customBillboard.val.length > 1) {
                             msg[9].bill.txt = window.utilities.settings.customBillboard.val;
@@ -730,13 +743,13 @@
                                 playersInfo[i + 33] = window.utilities.skinConfig.waist;
                             }
                         }
                     }
-                    return target.apply(thisArg, arguments[2]);
+                    return target.apply(that, arguments[2]);
                 }
             })
 
-            const skins = Symbol("SkinUnlock")
+            const skins = Symbol("SkinUnlock") /*chonker*/
             original_Object.defineProperty(original_Object.prototype, "skins", {
                 enumerable: false,
                 get() {
                     if (window.utilities.settings.skinUnlock.val && this.stats) {
@@ -818,8 +831,9 @@
         .set("isHacker", [/(window\['\w+']=)!0x0\)/, `$1!0x1)`])
         .set("Damage", [/\['send']\('vtw',(\w+)\)/, `['send']('kpd',$1)`])
         .set("fixHowler", [/(Howler\['orientation'](.+?)\)\),)/, ``])
         .set("respawnT", [/'\w+':0x3e8\*/g, `'respawnT':0x0*`])
+        .set("anticheat", [/document\['getElementById']\('myGUI'\).*?saveVal\('OptaonCosent',0x1\),(\w+=!0x0\),0x25)/, `($1`])
         //.set("FPS", [/(window\['mozRequestAnimationFrame']\|\|function\(\w+\){window\['setTimeout'])\(\w+,0x3e8\/0x3c\);/, "$1()"])
         //.set("Update", [/(\w+=window\['setTimeout']\(function\(\){\w+)\((\w+)\+(\w+)\)/, "$1($2=$3=0)"])
        // .set("weaponZoom", [/(,'zoom':)(\d.+?),/g, "$1window.utilities.settings.weaponZoom.val||$2"])
 
@@ -921,8 +935,16 @@
                 return true;
             }
         }
 
+        if (this.settings.autoActivateNuke.val && this.me && Object.keys(this.me.streaks).length) { /*chonker*/
+            this.ws.__send("k", 0);
+        }
+
+        if (espVal !== "off") {
+            this.overlay.healthColE = this.settings.rainbowColor.val ? this.overlay.rainbow.col : "#eb5656";
+        }
+
         for (let iter = 0, length = this.game.players.list.length; iter < length; iter++) {
             let player = this.game.players.list[iter];
             if (player[this.vars.isYou] || !player.active || !player[this.vars.objInstances] || this.getIsFriendly(player)) {
                 continue;
@@ -981,18 +1003,18 @@
                 this.ctx.lineTo(screenPos.x, screenPos.y);
                 this.ctx.strokeStyle = "rgba(0, 0, 0, 0.25)";
                 this.ctx.stroke();
                 this.ctx.lineWidth = 2.5;
-                this.ctx.strokeStyle = "#FF0000";
+                this.ctx.strokeStyle = this.settings.rainbowColor.val ? this.overlay.rainbow.col : "#eb5656"
                 this.ctx.stroke();
                 original_restore.apply(this.ctx, []);
             }
 
             original_save.apply(this.ctx, []);
             if (espVal == "twoD" || espVal == "full") {
                 // perfect box esp
                 this.ctx.lineWidth = 5;
-                this.ctx.strokeStyle = 'rgba(255,50,50,1)';
+                this.ctx.strokeStyle = this.settings.rainbowColor.val ? this.overlay.rainbow.col : "#eb5656"
                 let distanceScale = Math.max(.3, 1 - this.getD3D(worldPosition.x, worldPosition.y, worldPosition.z, player.x, player.y, player.z) / 600);
                 original_scale.apply(this.ctx, [distanceScale, distanceScale]);
                 let xScale = scaledWidth / distanceScale;
                 let yScale = scaledHeight / distanceScale;
@@ -1155,36 +1177,8 @@
                     },
                 })
             }
 
-            //Auto Nuke
-            //if (this.me.streak && this.me.streak % 25 === 0) {
-            //    this.game.streaks[0].activate()
-            //}
-
-           // if (this.streakCount == void 0) this.streakCount = document.querySelector("#streakVal");
-            //else if (this.streakCount.innerText == "25") {
-            //    if (me && Object.keys(me.streaks).length) {
-             //       this.ws.sendQueue.push(["k", 0]);
-             //   }
-            //}
-  //  sendWsMessage("k", 0)
-//}
-            //    let nukeKey = this.controls.binds.streakKeys.val[0];
-        //  .      this.controls.keys[nukeKey] = 1;
-        //        this.controls.didPressed[nukeKey] = 1;
-           // }
-               // let nukeKey = 32//this.controls.binds.streakKeys.val[0];
-                //this.simulateKey(nukeKey, "keydown");
-               // this.simulateKey(nukeKey, "keyup");
-               // if (this.game.nukeTimer) this.game.nukeTimer = 0;
-               // this.controls.keys[nukeKey] = 1;
-               // this.controls.didPressed[nukeKey] = 1;
-               // this.game.incStat("n", this.me);
-               // this.game.startNuke(this.me);
-              //  this.me.nukes++;
-            //}
-
             // autoReload
             if (this.settings.autoReload.val) {
                 let ammoLeft = this.me[this.vars.ammos][this.me[this.vars.weaponIndex]];
                 let capacity = this.me.weapon.ammo;
